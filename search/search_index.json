{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Introductions # The unoffical FIRST Robotics Competition Java Programming Tutorial Updated for the 2019 Season on 11/10/18 Powered by # Contributors # Name Team Team Role Tayler Uva 3255 Mentor Isaac Sayasane 3255 Alumni Sharon Riggs 6995 Mentor","title":"Introductions"},{"location":"index.html#introductions","text":"The unoffical FIRST Robotics Competition Java Programming Tutorial Updated for the 2019 Season on 11/10/18","title":"Introductions"},{"location":"index.html#powered_by","text":"","title":"Powered by"},{"location":"index.html#contributors","text":"Name Team Team Role Tayler Uva 3255 Mentor Isaac Sayasane 3255 Alumni Sharon Riggs 6995 Mentor","title":"Contributors"},{"location":"template_page.html","text":"Page title # Subtitle Section One # Some info Some other into Some sub info Section Two # Info Info 2","title":"Page title"},{"location":"template_page.html#page_title","text":"Subtitle","title":"Page title"},{"location":"template_page.html#section_one","text":"Some info Some other into Some sub info","title":"Section One"},{"location":"template_page.html#section_two","text":"Info Info 2","title":"Section Two"},{"location":"basics/java_basics.html","text":"Java Programming Basics # Learning What's What Overview # Objects, variables, and classes (in Java) make up our programs. We define, modify, use these variables and objects to make our programs run. Programs use key words to define characteristics of variables or objects. Basic keywords: public - an object accessible by other classes (files) private - an object only accessible by its containing class (file). protected - like private but can be seen by subclasses return - value to return or give back after method execution (run). void - a method that returns no value IMPORTANT NOTE Java is case sensitive, meaning capitalization matters! Classes # Classes are the files that contain our programming A program can be made up of one class but can also be made up of many classes All programs run a main class that can optionally load additional classes either directly or indirectly Example main loads class1, class1 loads class2 Classes are made up of variables and methods and are often used to separate and organize your code. Classes can also call (use) variables or methods of other classes if those have been set to public. Constructors # Classes can also have a constructor which is a special type of method that has the same name (case sensitive) as the class file Constructors are always called when the class is loaded into the program for the first time. This is often the only time they are called. Constructors are called when trying to access the class in other files. They can be called again if the class is programmed to be unloaded (destroyed) and reloaded. Calls to methods, and assignment of values, within the constructor will run as soon as the class is called (loaded) in the code. Variables # Variables are objects that contain data, they are characterized by data types Variables are assigned names and data types on creation Names can be anything with the exception of pre-existing keywords such as public or int Data types define what type of data is being stored in the variables: int - integers (whole numbers) double - double precision floating point (fractional/decimal values) boolean - true or false (true = 1 or false = 0) values. string - text values contained in parentheses Example: int sum; A variable that can hold whole number values Example: boolean isFull = true; A variable can either hold a true or false value and is being assigned a true value Most non-static variables can have their values assigned or assigned at any point elsewhere in your program Methods # Methods, also known as functions, can be thought of as subprograms or routines that run inside of your main program. Methods are used when you want to run the same code multiple times. Copying and pasting code is BAD! Use methods instead! Methods are also useful to access only certain parts or functions of another class. Methods can also have their own variables (local) or use variables available throughout the whole class (global variables), this will be explained more in the scope section. Methods can call (use) other methods, even multiple times. Example int value ; void increment (){ value ++; } Scope # When creating a variable, where you create it matters. This is known as the scope of a variable. The scope is where a variable can be seen within a class A variable created in a method can only be seen in that method. This is a local variable. A variable created outside a method can be seen in all methods of that class (file). This is a global variable. It is good practice to put them all at the top before your first method. Example of a Local Variable public int testMethod () { int example = 12 ; // Instide of method example = example + 1 ; return example } Example of a Public Variable int example = 12 ; // Outside of method public void testMethod () { example = example + 1 ; return example } Parameters # Parameters are variables that are passed (sent) to a method for it to use. You can pass more than one parameter but order matters when calling the method. Example // Example of a method with a parameter double half ( int num1 ){ double multiplier = 0.5 ; return num1 * multiplier ; } int newNumber = half ( 12 ); // <---- Method being called (used) in code Comments # Comments are a programmer-readable explanation or annotation in the source code of a program. Comments do not affect what the code does. Comments are often used to leave notes or explanations of what methods or classes are doing so that it is easier to understand the code. Example: Single Line Comments // This is what a single line comment looks like // You can also have multiple // single line comments in a row Example: Multi Line Comments /* This is what a multiline comment looks like */ Example: Doc Comments /** * This is a doc comment * * <ul> * <li>They can be viewed by hovering over code they are attached to</li> * <li>They can be formatted with HTML</li> * </ul> */ Conventions # There are also many different conventions when programming, this ensures that programs are readable between different people. A common naming convention: Programming is often done in CamelCase or lowerCamelCase Instead of adding spaces, capitalize the first letter of each word Example ThreeMotorDrive, driveForward, setSpeed Info There are other naming conventions, but for this tutorial we will use the camel cases","title":"Java Programming Basics"},{"location":"basics/java_basics.html#java_programming_basics","text":"Learning What's What","title":"Java Programming Basics"},{"location":"basics/java_basics.html#overview","text":"Objects, variables, and classes (in Java) make up our programs. We define, modify, use these variables and objects to make our programs run. Programs use key words to define characteristics of variables or objects. Basic keywords: public - an object accessible by other classes (files) private - an object only accessible by its containing class (file). protected - like private but can be seen by subclasses return - value to return or give back after method execution (run). void - a method that returns no value IMPORTANT NOTE Java is case sensitive, meaning capitalization matters!","title":"Overview"},{"location":"basics/java_basics.html#classes","text":"Classes are the files that contain our programming A program can be made up of one class but can also be made up of many classes All programs run a main class that can optionally load additional classes either directly or indirectly Example main loads class1, class1 loads class2 Classes are made up of variables and methods and are often used to separate and organize your code. Classes can also call (use) variables or methods of other classes if those have been set to public.","title":"Classes"},{"location":"basics/java_basics.html#constructors","text":"Classes can also have a constructor which is a special type of method that has the same name (case sensitive) as the class file Constructors are always called when the class is loaded into the program for the first time. This is often the only time they are called. Constructors are called when trying to access the class in other files. They can be called again if the class is programmed to be unloaded (destroyed) and reloaded. Calls to methods, and assignment of values, within the constructor will run as soon as the class is called (loaded) in the code.","title":"Constructors"},{"location":"basics/java_basics.html#variables","text":"Variables are objects that contain data, they are characterized by data types Variables are assigned names and data types on creation Names can be anything with the exception of pre-existing keywords such as public or int Data types define what type of data is being stored in the variables: int - integers (whole numbers) double - double precision floating point (fractional/decimal values) boolean - true or false (true = 1 or false = 0) values. string - text values contained in parentheses Example: int sum; A variable that can hold whole number values Example: boolean isFull = true; A variable can either hold a true or false value and is being assigned a true value Most non-static variables can have their values assigned or assigned at any point elsewhere in your program","title":"Variables"},{"location":"basics/java_basics.html#methods","text":"Methods, also known as functions, can be thought of as subprograms or routines that run inside of your main program. Methods are used when you want to run the same code multiple times. Copying and pasting code is BAD! Use methods instead! Methods are also useful to access only certain parts or functions of another class. Methods can also have their own variables (local) or use variables available throughout the whole class (global variables), this will be explained more in the scope section. Methods can call (use) other methods, even multiple times. Example int value ; void increment (){ value ++; }","title":"Methods"},{"location":"basics/java_basics.html#scope","text":"When creating a variable, where you create it matters. This is known as the scope of a variable. The scope is where a variable can be seen within a class A variable created in a method can only be seen in that method. This is a local variable. A variable created outside a method can be seen in all methods of that class (file). This is a global variable. It is good practice to put them all at the top before your first method. Example of a Local Variable public int testMethod () { int example = 12 ; // Instide of method example = example + 1 ; return example } Example of a Public Variable int example = 12 ; // Outside of method public void testMethod () { example = example + 1 ; return example }","title":"Scope"},{"location":"basics/java_basics.html#parameters","text":"Parameters are variables that are passed (sent) to a method for it to use. You can pass more than one parameter but order matters when calling the method. Example // Example of a method with a parameter double half ( int num1 ){ double multiplier = 0.5 ; return num1 * multiplier ; } int newNumber = half ( 12 ); // <---- Method being called (used) in code","title":"Parameters"},{"location":"basics/java_basics.html#comments","text":"Comments are a programmer-readable explanation or annotation in the source code of a program. Comments do not affect what the code does. Comments are often used to leave notes or explanations of what methods or classes are doing so that it is easier to understand the code. Example: Single Line Comments // This is what a single line comment looks like // You can also have multiple // single line comments in a row Example: Multi Line Comments /* This is what a multiline comment looks like */ Example: Doc Comments /** * This is a doc comment * * <ul> * <li>They can be viewed by hovering over code they are attached to</li> * <li>They can be formatted with HTML</li> * </ul> */","title":"Comments"},{"location":"basics/java_basics.html#conventions","text":"There are also many different conventions when programming, this ensures that programs are readable between different people. A common naming convention: Programming is often done in CamelCase or lowerCamelCase Instead of adding spaces, capitalize the first letter of each word Example ThreeMotorDrive, driveForward, setSpeed Info There are other naming conventions, but for this tutorial we will use the camel cases","title":"Conventions"},{"location":"basics/roboRIO.html","text":"roboRIO # The Brains of the Bot! The roboRIO Basics # The roboRIO is the brain of an FRC robot. It is the main processing unit and is where the code is stored and run. It is very similar to something like a Raspberry Pi, it\u2019s a mini computer! The roboRIO can connect to many different devices such as motor controllers, servos, and sensors through its various interface connections such as: Digital I/O, PWM, CAN Bus, Ethernet, USB, MXP The roboRIO IO # Digital IO (DIO) used for sensors and switches PWM used for motor controllers and servos CAN used for motor controllers and sensors MXP used for functionality expansion Check the roboRIO user manual for more details","title":"roboRIO"},{"location":"basics/roboRIO.html#roborio","text":"The Brains of the Bot!","title":"roboRIO"},{"location":"basics/roboRIO.html#the_roborio_basics","text":"The roboRIO is the brain of an FRC robot. It is the main processing unit and is where the code is stored and run. It is very similar to something like a Raspberry Pi, it\u2019s a mini computer! The roboRIO can connect to many different devices such as motor controllers, servos, and sensors through its various interface connections such as: Digital I/O, PWM, CAN Bus, Ethernet, USB, MXP","title":"The roboRIO Basics"},{"location":"basics/roboRIO.html#the_roborio_io","text":"Digital IO (DIO) used for sensors and switches PWM used for motor controllers and servos CAN used for motor controllers and sensors MXP used for functionality expansion Check the roboRIO user manual for more details","title":"The roboRIO IO"},{"location":"basics/sensors.html","text":"Sensors # How does the robot see? Some types of sensors # Limit Switches - detects contact Camera - provides sight Encoders - measures rotational or linear motion Ultrasonic - measures distances Gyroscope - measures orientation Processed Vision - measures target's distance, angle, and offset from robot For more info on sensors see: High Tech High Top Hat Technicians - Electrical Tutorial Limit Switch Grayhill brand Quadrature Encoder Kauai Labs navX Gryo/ Accelerometer","title":"Sensors"},{"location":"basics/sensors.html#sensors","text":"How does the robot see?","title":"Sensors"},{"location":"basics/sensors.html#some_types_of_sensors","text":"Limit Switches - detects contact Camera - provides sight Encoders - measures rotational or linear motion Ultrasonic - measures distances Gyroscope - measures orientation Processed Vision - measures target's distance, angle, and offset from robot For more info on sensors see: High Tech High Top Hat Technicians - Electrical Tutorial Limit Switch Grayhill brand Quadrature Encoder Kauai Labs navX Gryo/ Accelerometer","title":"Some types of sensors"},{"location":"basics/wpilib.html","text":"WPILib Programming Basics # Making FRC Programming Easy What is WPILib # The WPI Robotics library (WPILib) is a set of software classes that interfaces with the hardware and software in your FRC RoboRIO. There are classes to handle sensors, motor speed controllers, the driver station, and a number of other utility functions. Documentation is available at http://first.wpi.edu/FRC/roborio/release/docs/java WPILib adds those sensors and controllers as additional data types (like int or double ) and classes. Examples Talon , Solenoid , Encoder ... Command Based Robot # For our programming tutorial we will be creating a Command based robot Command Based Robots are much like Legos, with very basic pieces you can make something simple like a house or complicated like a replica Star Wars Millennium Falcon A command based robot is broken down into subsystem classes and command classes. In the code, a command based robot is made up of 3 packages ( folders ) labeled robot, commands, and subsystems There are other types of robots but we will use Command Based Subsystems # A subsystem is a special template class made by FRC. In robotics, subsystems are sections of the whole robot. For example every FRC robot has a Drivetrain subsystem which is what controls the robot\u2019s driving both physically and programmatically. To avoid confusion between software and mechanical teams, subsystems should be called the same thing. If we have a ball intake system, we will both call it Intake or Collector . Subsystems of a robot can contain parts to control or read data from. The Drivetrain subsystem could contain motor controllers and encoders both physically and programmatically. Using a dog as an example: the legs , tail , and head are subsystems . The head subsystem has the parts: eyes , ears , and nose . When programming subsystems we use variables and methods to tell our subsystem what it has and what it is capable of or should do. These variables will be the parts in the subsystem These methods will define what those parts are capable of. Using a dog head subsystem as an example: Some variables (parts) would be: leftEye , rightEye , nose , leftEar , rightEar . Some example methods would be closeEyes or openEyes since these are things the dog are capable of. These methods would use both the leftEye and rightEye and close them. Example //This method closes the dog eyes public void closeEyes (){ leftEye . close (); rightEye . close (); A robot example of a Drivetrain subsystem would have leftMotor , and rightMotor as variables and setSpeed as a method telling it how to set the speed of those motor controllers. Having the setSpeed method tells our program that our Drivetrain subsystem can set its speed. Example //This method sets the speed of the drivetrain public void setSpeed ( double speed ){ leftMotor . set ( speed ); rightMotor . set ( speed ); } Commands # A command is a special template class (file) made by FRC. In robotics, commands are actions you want a robot to do (just like a real life command). A command is an action a subsystem(s) performs. For example you may want your robot to drive full speed forward so you make a command class called DriveForward . Since a robot uses a Drivetrain subsystem to control its motors, this command would call our previously created setSpeed method from that subsystem. Tip Subsystems define what the robot is made of and what it can do while commands actually tell the robot to do those things Using a dog as an example we can tell the dog to blink by creating a BlinkEyes command The command would call the method, closeEyes() then the method openEyes()","title":"WPILib Programming Basics"},{"location":"basics/wpilib.html#wpilib_programming_basics","text":"Making FRC Programming Easy","title":"WPILib Programming Basics"},{"location":"basics/wpilib.html#what_is_wpilib","text":"The WPI Robotics library (WPILib) is a set of software classes that interfaces with the hardware and software in your FRC RoboRIO. There are classes to handle sensors, motor speed controllers, the driver station, and a number of other utility functions. Documentation is available at http://first.wpi.edu/FRC/roborio/release/docs/java WPILib adds those sensors and controllers as additional data types (like int or double ) and classes. Examples Talon , Solenoid , Encoder ...","title":"What is WPILib"},{"location":"basics/wpilib.html#command_based_robot","text":"For our programming tutorial we will be creating a Command based robot Command Based Robots are much like Legos, with very basic pieces you can make something simple like a house or complicated like a replica Star Wars Millennium Falcon A command based robot is broken down into subsystem classes and command classes. In the code, a command based robot is made up of 3 packages ( folders ) labeled robot, commands, and subsystems There are other types of robots but we will use Command Based","title":"Command Based Robot"},{"location":"basics/wpilib.html#subsystems","text":"A subsystem is a special template class made by FRC. In robotics, subsystems are sections of the whole robot. For example every FRC robot has a Drivetrain subsystem which is what controls the robot\u2019s driving both physically and programmatically. To avoid confusion between software and mechanical teams, subsystems should be called the same thing. If we have a ball intake system, we will both call it Intake or Collector . Subsystems of a robot can contain parts to control or read data from. The Drivetrain subsystem could contain motor controllers and encoders both physically and programmatically. Using a dog as an example: the legs , tail , and head are subsystems . The head subsystem has the parts: eyes , ears , and nose . When programming subsystems we use variables and methods to tell our subsystem what it has and what it is capable of or should do. These variables will be the parts in the subsystem These methods will define what those parts are capable of. Using a dog head subsystem as an example: Some variables (parts) would be: leftEye , rightEye , nose , leftEar , rightEar . Some example methods would be closeEyes or openEyes since these are things the dog are capable of. These methods would use both the leftEye and rightEye and close them. Example //This method closes the dog eyes public void closeEyes (){ leftEye . close (); rightEye . close (); A robot example of a Drivetrain subsystem would have leftMotor , and rightMotor as variables and setSpeed as a method telling it how to set the speed of those motor controllers. Having the setSpeed method tells our program that our Drivetrain subsystem can set its speed. Example //This method sets the speed of the drivetrain public void setSpeed ( double speed ){ leftMotor . set ( speed ); rightMotor . set ( speed ); }","title":"Subsystems"},{"location":"basics/wpilib.html#commands","text":"A command is a special template class (file) made by FRC. In robotics, commands are actions you want a robot to do (just like a real life command). A command is an action a subsystem(s) performs. For example you may want your robot to drive full speed forward so you make a command class called DriveForward . Since a robot uses a Drivetrain subsystem to control its motors, this command would call our previously created setSpeed method from that subsystem. Tip Subsystems define what the robot is made of and what it can do while commands actually tell the robot to do those things Using a dog as an example we can tell the dog to blink by creating a BlinkEyes command The command would call the method, closeEyes() then the method openEyes()","title":"Commands"}]}